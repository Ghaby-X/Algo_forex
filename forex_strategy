{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["kOJrQzMViuqZ"],"toc_visible":true,"authorship_tag":"ABX9TyPxc23aKQdIKNgT4OfU7Q1b"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Rough work"],"metadata":{"id":"kOJrQzMViuqZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2DKpS9lkkgro"},"outputs":[],"source":["import yfinance as yf\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["aapl = yf.Ticker('AAPL')\n","aapl_data = aapl.history(period = 'max')"],"metadata":{"id":"FQU6WuIrk3IT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["aapl_data.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"yGgz4x9J1z5o","executionInfo":{"status":"ok","timestamp":1679245744362,"user_tz":0,"elapsed":1285,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"ba997721-35c1-46b6-daf4-15baa2f7aeac"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                 Open        High         Low       Close  \\\n","Date                                                                        \n","2023-03-13 00:00:00-04:00  147.809998  153.139999  147.699997  150.470001   \n","2023-03-14 00:00:00-04:00  151.279999  153.399994  150.100006  152.589996   \n","2023-03-15 00:00:00-04:00  151.190002  153.250000  149.919998  152.990005   \n","2023-03-16 00:00:00-04:00  152.160004  156.460007  151.639999  155.850006   \n","2023-03-17 00:00:00-04:00  156.080002  156.740005  154.279999  155.000000   \n","\n","                             Volume  Dividends  Stock Splits  \n","Date                                                          \n","2023-03-13 00:00:00-04:00  84457100        0.0           0.0  \n","2023-03-14 00:00:00-04:00  73695900        0.0           0.0  \n","2023-03-15 00:00:00-04:00  77167900        0.0           0.0  \n","2023-03-16 00:00:00-04:00  76161100        0.0           0.0  \n","2023-03-17 00:00:00-04:00  98862500        0.0           0.0  "],"text/html":["\n","  <div id=\"df-1f2c3ab3-c3fb-4c7d-a42e-1af19264ae15\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Dividends</th>\n","      <th>Stock Splits</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2023-03-13 00:00:00-04:00</th>\n","      <td>147.809998</td>\n","      <td>153.139999</td>\n","      <td>147.699997</td>\n","      <td>150.470001</td>\n","      <td>84457100</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-14 00:00:00-04:00</th>\n","      <td>151.279999</td>\n","      <td>153.399994</td>\n","      <td>150.100006</td>\n","      <td>152.589996</td>\n","      <td>73695900</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-15 00:00:00-04:00</th>\n","      <td>151.190002</td>\n","      <td>153.250000</td>\n","      <td>149.919998</td>\n","      <td>152.990005</td>\n","      <td>77167900</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-16 00:00:00-04:00</th>\n","      <td>152.160004</td>\n","      <td>156.460007</td>\n","      <td>151.639999</td>\n","      <td>155.850006</td>\n","      <td>76161100</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-17 00:00:00-04:00</th>\n","      <td>156.080002</td>\n","      <td>156.740005</td>\n","      <td>154.279999</td>\n","      <td>155.000000</td>\n","      <td>98862500</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f2c3ab3-c3fb-4c7d-a42e-1af19264ae15')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1f2c3ab3-c3fb-4c7d-a42e-1af19264ae15 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1f2c3ab3-c3fb-4c7d-a42e-1af19264ae15');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["##from ChatGPT\n","\n","# # Download data for a stock\n","# stock = yf.Ticker(\"AAPL\")\n","# data = stock.history(period=\"max\")\n","\n","# # Calculate the 30-day and 200-day SMA\n","# data[\"SMA_30\"] = data[\"Close\"].rolling(window=30).mean()\n","# data[\"SMA_200\"] = data[\"Close\"].rolling(window=200).mean()\n","\n","# # Generate signals based on the SMA crossover\n","# data[\"Signal\"] = 0.0\n","# data[\"Signal\"][30:] = np.where(data[\"SMA_30\"][30:] > data[\"SMA_200\"][30:], 1.0, 0.0)\n","# data[\"Position\"] = data[\"Signal\"].diff()\n","\n","# # Place a stop loss order\n","# stop_loss = 0.05 # 5%\n","# data[\"Stop_Loss\"] = data[\"Close\"] * (1 - stop_loss)\n","\n","# # Backtest the strategy\n","# initial_capital = 10000.0\n","# positions = pd.DataFrame(index=data.index).fillna(0.0)\n","# portfolio = pd.DataFrame(index=data.index).fillna(0.0)\n","# positions[\"AAPL\"] = 100 * data[\"Signal\"] # Buy 100 shares when signal is 1\n","# portfolio[\"Cash\"] = initial_capital - (positions.shift(1) * data[\"Close\"]).cumsum()\n","# portfolio[\"Total\"] = portfolio[\"Cash\"] + (positions.shift(1) * data[\"Close\"]).cumsum()\n","# portfolio[\"Returns\"] = portfolio[\"Total\"].pct_change()\n","\n","# # Plot the results\n","# import matplotlib.pyplot as plt\n","# plt.plot(portfolio[\"Total\"])\n","# plt.xlabel(\"Date\")\n","# plt.ylabel(\"Portfolio Value ($)\")\n","# plt.title(\"SMA Crossover Trading Strategy\")\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"sYjGT1U614Lr","executionInfo":{"status":"error","timestamp":1679245847553,"user_tz":0,"elapsed":1959,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"6ad80c23-5255-4a40-a763-49a119b8577b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"Exception","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-7475dda5eaf8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mincome_stmt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/ticker.py\u001b[0m in \u001b[0;36mincome_stmt\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    156\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mincome_stmt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0m_pd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 158\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_income_stmt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpretty\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/base.py\u001b[0m in \u001b[0;36mget_income_stmt\u001b[0;34m(self, proxy, as_dict, pretty, freq, legacy)\u001b[0m\n\u001b[1;32m   1580\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fundamentals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinancials\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_income_scrape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1581\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1582\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fundamentals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinancials\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_income_time_series\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1584\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpretty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/scrapers/fundamentals.py\u001b[0m in \u001b[0;36mget_income_time_series\u001b[0;34m(self, freq, proxy)\u001b[0m\n\u001b[1;32m    111\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_income_time_series\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfreq\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m             \u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetch_time_series\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"income\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfreq\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/scrapers/fundamentals.py\u001b[0m in \u001b[0;36m_fetch_time_series\u001b[0;34m(self, name, timescale, proxy)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m             \u001b[0mstatement\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_financials_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimescale\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatement\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/scrapers/fundamentals.py\u001b[0m in \u001b[0;36m_create_financials_table\u001b[0;34m(self, name, timescale, proxy)\u001b[0m\n\u001b[1;32m    153\u001b[0m             \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"financials\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 155\u001b[0;31m         \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_datastore_keys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    156\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_financials_time_series\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimescale\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/scrapers/fundamentals.py\u001b[0m in \u001b[0;36m_get_datastore_keys\u001b[0;34m(self, sub_page, proxy)\u001b[0m\n\u001b[1;32m    160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_datastore_keys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msub_page\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m         \u001b[0mdata_stores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_json_data_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msub_page\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m         \u001b[0;31m# Step 1: get the keys:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m     \u001b[0;31m# copy over the lru_cache extra methods to this wrapper to be able to access them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mget_json_data_stores\u001b[0;34m(self, sub_page, proxy)\u001b[0m\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;31m# Decrypt!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mstores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecrypt_cryptojs_aes_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mstores\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m             \u001b[0;31m# Maybe Yahoo returned old format, not encrypted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mdecrypt_cryptojs_aes_stores\u001b[0;34m(data, keys)\u001b[0m\n\u001b[1;32m    160\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"yfinance failed to decrypt Yahoo data response\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0mdecoded_stores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplaintext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mException\u001b[0m: yfinance failed to decrypt Yahoo data response"]}]},{"cell_type":"markdown","source":["##  CHAT GPT"],"metadata":{"id":"F9tuXZsXyMkf"}},{"cell_type":"code","source":["# Download data for a stock\n","stock = yf.Ticker(\"AAPL\")\n","data = stock.history(period=\"max\")\n","data"],"metadata":{"id":"eR3amOGi2UxN","colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"status":"ok","timestamp":1680368781957,"user_tz":0,"elapsed":1340,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"4502af94-47f7-463b-b748-1d5490a7d46a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                 Open        High         Low       Close  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00    0.099722    0.100155    0.099722    0.099722   \n","1980-12-15 00:00:00-05:00    0.094953    0.094953    0.094519    0.094519   \n","1980-12-16 00:00:00-05:00    0.088015    0.088015    0.087582    0.087582   \n","1980-12-17 00:00:00-05:00    0.089749    0.090183    0.089749    0.089749   \n","1980-12-18 00:00:00-05:00    0.092351    0.092785    0.092351    0.092351   \n","...                               ...         ...         ...         ...   \n","2023-03-27 00:00:00-04:00  159.940002  160.770004  157.869995  158.279999   \n","2023-03-28 00:00:00-04:00  157.970001  158.490005  155.979996  157.649994   \n","2023-03-29 00:00:00-04:00  159.369995  161.050003  159.350006  160.770004   \n","2023-03-30 00:00:00-04:00  161.529999  162.470001  161.270004  162.360001   \n","2023-03-31 00:00:00-04:00  162.440002  165.000000  161.910004  164.899994   \n","\n","                              Volume  Dividends  Stock Splits  \n","Date                                                           \n","1980-12-12 00:00:00-05:00  469033600        0.0           0.0  \n","1980-12-15 00:00:00-05:00  175884800        0.0           0.0  \n","1980-12-16 00:00:00-05:00  105728000        0.0           0.0  \n","1980-12-17 00:00:00-05:00   86441600        0.0           0.0  \n","1980-12-18 00:00:00-05:00   73449600        0.0           0.0  \n","...                              ...        ...           ...  \n","2023-03-27 00:00:00-04:00   52390300        0.0           0.0  \n","2023-03-28 00:00:00-04:00   45992200        0.0           0.0  \n","2023-03-29 00:00:00-04:00   51305700        0.0           0.0  \n","2023-03-30 00:00:00-04:00   49501700        0.0           0.0  \n","2023-03-31 00:00:00-04:00   68694700        0.0           0.0  \n","\n","[10665 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-d7bd41d0-7d30-45d6-a075-11fdbbb7b53e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Dividends</th>\n","      <th>Stock Splits</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>0.099722</td>\n","      <td>0.100155</td>\n","      <td>0.099722</td>\n","      <td>0.099722</td>\n","      <td>469033600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.094953</td>\n","      <td>0.094953</td>\n","      <td>0.094519</td>\n","      <td>0.094519</td>\n","      <td>175884800</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.088015</td>\n","      <td>0.088015</td>\n","      <td>0.087582</td>\n","      <td>0.087582</td>\n","      <td>105728000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.089749</td>\n","      <td>0.090183</td>\n","      <td>0.089749</td>\n","      <td>0.089749</td>\n","      <td>86441600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.092351</td>\n","      <td>0.092785</td>\n","      <td>0.092351</td>\n","      <td>0.092351</td>\n","      <td>73449600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>159.940002</td>\n","      <td>160.770004</td>\n","      <td>157.869995</td>\n","      <td>158.279999</td>\n","      <td>52390300</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>157.970001</td>\n","      <td>158.490005</td>\n","      <td>155.979996</td>\n","      <td>157.649994</td>\n","      <td>45992200</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>159.369995</td>\n","      <td>161.050003</td>\n","      <td>159.350006</td>\n","      <td>160.770004</td>\n","      <td>51305700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>161.529999</td>\n","      <td>162.470001</td>\n","      <td>161.270004</td>\n","      <td>162.360001</td>\n","      <td>49501700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>162.440002</td>\n","      <td>165.000000</td>\n","      <td>161.910004</td>\n","      <td>164.899994</td>\n","      <td>68694700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d7bd41d0-7d30-45d6-a075-11fdbbb7b53e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d7bd41d0-7d30-45d6-a075-11fdbbb7b53e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d7bd41d0-7d30-45d6-a075-11fdbbb7b53e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# Calculate the 30-day and 200-day SMA\n","data[\"SMA_30\"] = data[\"Close\"].rolling(window=30).mean()\n","data[\"SMA_200\"] = data[\"Close\"].rolling(window=200).mean()\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"UdyaWanpyLys","executionInfo":{"status":"ok","timestamp":1680368815104,"user_tz":0,"elapsed":394,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"f884833b-8864-466a-fd4c-4ac7b5746ff9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                 Open        High         Low       Close  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00    0.099722    0.100155    0.099722    0.099722   \n","1980-12-15 00:00:00-05:00    0.094953    0.094953    0.094519    0.094519   \n","1980-12-16 00:00:00-05:00    0.088015    0.088015    0.087582    0.087582   \n","1980-12-17 00:00:00-05:00    0.089749    0.090183    0.089749    0.089749   \n","1980-12-18 00:00:00-05:00    0.092351    0.092785    0.092351    0.092351   \n","...                               ...         ...         ...         ...   \n","2023-03-27 00:00:00-04:00  159.940002  160.770004  157.869995  158.279999   \n","2023-03-28 00:00:00-04:00  157.970001  158.490005  155.979996  157.649994   \n","2023-03-29 00:00:00-04:00  159.369995  161.050003  159.350006  160.770004   \n","2023-03-30 00:00:00-04:00  161.529999  162.470001  161.270004  162.360001   \n","2023-03-31 00:00:00-04:00  162.440002  165.000000  161.910004  164.899994   \n","\n","                              Volume  Dividends  Stock Splits      SMA_30  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00  469033600        0.0           0.0         NaN   \n","1980-12-15 00:00:00-05:00  175884800        0.0           0.0         NaN   \n","1980-12-16 00:00:00-05:00  105728000        0.0           0.0         NaN   \n","1980-12-17 00:00:00-05:00   86441600        0.0           0.0         NaN   \n","1980-12-18 00:00:00-05:00   73449600        0.0           0.0         NaN   \n","...                              ...        ...           ...         ...   \n","2023-03-27 00:00:00-04:00   52390300        0.0           0.0  152.532667   \n","2023-03-28 00:00:00-04:00   45992200        0.0           0.0  152.659333   \n","2023-03-29 00:00:00-04:00   51305700        0.0           0.0  152.911667   \n","2023-03-30 00:00:00-04:00   49501700        0.0           0.0  153.146000   \n","2023-03-31 00:00:00-04:00   68694700        0.0           0.0  153.519000   \n","\n","                              SMA_200  \n","Date                                   \n","1980-12-12 00:00:00-05:00         NaN  \n","1980-12-15 00:00:00-05:00         NaN  \n","1980-12-16 00:00:00-05:00         NaN  \n","1980-12-17 00:00:00-05:00         NaN  \n","1980-12-18 00:00:00-05:00         NaN  \n","...                               ...  \n","2023-03-27 00:00:00-04:00  147.634195  \n","2023-03-28 00:00:00-04:00  147.712498  \n","2023-03-29 00:00:00-04:00  147.833825  \n","2023-03-30 00:00:00-04:00  147.989232  \n","2023-03-31 00:00:00-04:00  148.152960  \n","\n","[10665 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-73f42061-ef6c-4857-9699-4e12670703f4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Dividends</th>\n","      <th>Stock Splits</th>\n","      <th>SMA_30</th>\n","      <th>SMA_200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>0.099722</td>\n","      <td>0.100155</td>\n","      <td>0.099722</td>\n","      <td>0.099722</td>\n","      <td>469033600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.094953</td>\n","      <td>0.094953</td>\n","      <td>0.094519</td>\n","      <td>0.094519</td>\n","      <td>175884800</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.088015</td>\n","      <td>0.088015</td>\n","      <td>0.087582</td>\n","      <td>0.087582</td>\n","      <td>105728000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.089749</td>\n","      <td>0.090183</td>\n","      <td>0.089749</td>\n","      <td>0.089749</td>\n","      <td>86441600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.092351</td>\n","      <td>0.092785</td>\n","      <td>0.092351</td>\n","      <td>0.092351</td>\n","      <td>73449600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>159.940002</td>\n","      <td>160.770004</td>\n","      <td>157.869995</td>\n","      <td>158.279999</td>\n","      <td>52390300</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.532667</td>\n","      <td>147.634195</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>157.970001</td>\n","      <td>158.490005</td>\n","      <td>155.979996</td>\n","      <td>157.649994</td>\n","      <td>45992200</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.659333</td>\n","      <td>147.712498</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>159.369995</td>\n","      <td>161.050003</td>\n","      <td>159.350006</td>\n","      <td>160.770004</td>\n","      <td>51305700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.911667</td>\n","      <td>147.833825</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>161.529999</td>\n","      <td>162.470001</td>\n","      <td>161.270004</td>\n","      <td>162.360001</td>\n","      <td>49501700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.146000</td>\n","      <td>147.989232</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>162.440002</td>\n","      <td>165.000000</td>\n","      <td>161.910004</td>\n","      <td>164.899994</td>\n","      <td>68694700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.519000</td>\n","      <td>148.152960</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73f42061-ef6c-4857-9699-4e12670703f4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-73f42061-ef6c-4857-9699-4e12670703f4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-73f42061-ef6c-4857-9699-4e12670703f4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# Generate signals based on the SMA crossover\n","data[\"Signal\"] = 0.0\n","data[\"Signal\"][30:] = np.where(data[\"SMA_30\"][30:] > data[\"SMA_200\"][30:], 1.0, 0.0)\n","data[\"Position\"] = data[\"Signal\"].diff()\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"HoSTzgpPyUbj","executionInfo":{"status":"ok","timestamp":1680368853094,"user_tz":0,"elapsed":347,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"6351f85a-017d-48c6-8713-bd75c8482588"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-dfab4137927e>:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data[\"Signal\"][30:] = np.where(data[\"SMA_30\"][30:] > data[\"SMA_200\"][30:], 1.0, 0.0)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                 Open        High         Low       Close  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00    0.099722    0.100155    0.099722    0.099722   \n","1980-12-15 00:00:00-05:00    0.094953    0.094953    0.094519    0.094519   \n","1980-12-16 00:00:00-05:00    0.088015    0.088015    0.087582    0.087582   \n","1980-12-17 00:00:00-05:00    0.089749    0.090183    0.089749    0.089749   \n","1980-12-18 00:00:00-05:00    0.092351    0.092785    0.092351    0.092351   \n","...                               ...         ...         ...         ...   \n","2023-03-27 00:00:00-04:00  159.940002  160.770004  157.869995  158.279999   \n","2023-03-28 00:00:00-04:00  157.970001  158.490005  155.979996  157.649994   \n","2023-03-29 00:00:00-04:00  159.369995  161.050003  159.350006  160.770004   \n","2023-03-30 00:00:00-04:00  161.529999  162.470001  161.270004  162.360001   \n","2023-03-31 00:00:00-04:00  162.440002  165.000000  161.910004  164.899994   \n","\n","                              Volume  Dividends  Stock Splits      SMA_30  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00  469033600        0.0           0.0         NaN   \n","1980-12-15 00:00:00-05:00  175884800        0.0           0.0         NaN   \n","1980-12-16 00:00:00-05:00  105728000        0.0           0.0         NaN   \n","1980-12-17 00:00:00-05:00   86441600        0.0           0.0         NaN   \n","1980-12-18 00:00:00-05:00   73449600        0.0           0.0         NaN   \n","...                              ...        ...           ...         ...   \n","2023-03-27 00:00:00-04:00   52390300        0.0           0.0  152.532667   \n","2023-03-28 00:00:00-04:00   45992200        0.0           0.0  152.659333   \n","2023-03-29 00:00:00-04:00   51305700        0.0           0.0  152.911667   \n","2023-03-30 00:00:00-04:00   49501700        0.0           0.0  153.146000   \n","2023-03-31 00:00:00-04:00   68694700        0.0           0.0  153.519000   \n","\n","                              SMA_200  Signal  Position  \n","Date                                                     \n","1980-12-12 00:00:00-05:00         NaN     0.0       NaN  \n","1980-12-15 00:00:00-05:00         NaN     0.0       0.0  \n","1980-12-16 00:00:00-05:00         NaN     0.0       0.0  \n","1980-12-17 00:00:00-05:00         NaN     0.0       0.0  \n","1980-12-18 00:00:00-05:00         NaN     0.0       0.0  \n","...                               ...     ...       ...  \n","2023-03-27 00:00:00-04:00  147.634195     1.0       0.0  \n","2023-03-28 00:00:00-04:00  147.712498     1.0       0.0  \n","2023-03-29 00:00:00-04:00  147.833825     1.0       0.0  \n","2023-03-30 00:00:00-04:00  147.989232     1.0       0.0  \n","2023-03-31 00:00:00-04:00  148.152960     1.0       0.0  \n","\n","[10665 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-c53d4155-0b53-4a51-b709-8962d988f9e0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Dividends</th>\n","      <th>Stock Splits</th>\n","      <th>SMA_30</th>\n","      <th>SMA_200</th>\n","      <th>Signal</th>\n","      <th>Position</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>0.099722</td>\n","      <td>0.100155</td>\n","      <td>0.099722</td>\n","      <td>0.099722</td>\n","      <td>469033600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.094953</td>\n","      <td>0.094953</td>\n","      <td>0.094519</td>\n","      <td>0.094519</td>\n","      <td>175884800</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.088015</td>\n","      <td>0.088015</td>\n","      <td>0.087582</td>\n","      <td>0.087582</td>\n","      <td>105728000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.089749</td>\n","      <td>0.090183</td>\n","      <td>0.089749</td>\n","      <td>0.089749</td>\n","      <td>86441600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.092351</td>\n","      <td>0.092785</td>\n","      <td>0.092351</td>\n","      <td>0.092351</td>\n","      <td>73449600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>159.940002</td>\n","      <td>160.770004</td>\n","      <td>157.869995</td>\n","      <td>158.279999</td>\n","      <td>52390300</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.532667</td>\n","      <td>147.634195</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>157.970001</td>\n","      <td>158.490005</td>\n","      <td>155.979996</td>\n","      <td>157.649994</td>\n","      <td>45992200</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.659333</td>\n","      <td>147.712498</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>159.369995</td>\n","      <td>161.050003</td>\n","      <td>159.350006</td>\n","      <td>160.770004</td>\n","      <td>51305700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.911667</td>\n","      <td>147.833825</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>161.529999</td>\n","      <td>162.470001</td>\n","      <td>161.270004</td>\n","      <td>162.360001</td>\n","      <td>49501700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.146000</td>\n","      <td>147.989232</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>162.440002</td>\n","      <td>165.000000</td>\n","      <td>161.910004</td>\n","      <td>164.899994</td>\n","      <td>68694700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.519000</td>\n","      <td>148.152960</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 11 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c53d4155-0b53-4a51-b709-8962d988f9e0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c53d4155-0b53-4a51-b709-8962d988f9e0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c53d4155-0b53-4a51-b709-8962d988f9e0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Place a stop loss order\n","stop_loss = 0.05 # 5%\n","data[\"Stop_Loss\"] = data[\"Close\"] * (1 - stop_loss)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"JZinbkpbydoq","executionInfo":{"status":"ok","timestamp":1680368910967,"user_tz":0,"elapsed":735,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"c6c7fcdb-7659-4725-ec1f-db28d9063e12"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                 Open        High         Low       Close  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00    0.099722    0.100155    0.099722    0.099722   \n","1980-12-15 00:00:00-05:00    0.094953    0.094953    0.094519    0.094519   \n","1980-12-16 00:00:00-05:00    0.088015    0.088015    0.087582    0.087582   \n","1980-12-17 00:00:00-05:00    0.089749    0.090183    0.089749    0.089749   \n","1980-12-18 00:00:00-05:00    0.092351    0.092785    0.092351    0.092351   \n","...                               ...         ...         ...         ...   \n","2023-03-27 00:00:00-04:00  159.940002  160.770004  157.869995  158.279999   \n","2023-03-28 00:00:00-04:00  157.970001  158.490005  155.979996  157.649994   \n","2023-03-29 00:00:00-04:00  159.369995  161.050003  159.350006  160.770004   \n","2023-03-30 00:00:00-04:00  161.529999  162.470001  161.270004  162.360001   \n","2023-03-31 00:00:00-04:00  162.440002  165.000000  161.910004  164.899994   \n","\n","                              Volume  Dividends  Stock Splits      SMA_30  \\\n","Date                                                                        \n","1980-12-12 00:00:00-05:00  469033600        0.0           0.0         NaN   \n","1980-12-15 00:00:00-05:00  175884800        0.0           0.0         NaN   \n","1980-12-16 00:00:00-05:00  105728000        0.0           0.0         NaN   \n","1980-12-17 00:00:00-05:00   86441600        0.0           0.0         NaN   \n","1980-12-18 00:00:00-05:00   73449600        0.0           0.0         NaN   \n","...                              ...        ...           ...         ...   \n","2023-03-27 00:00:00-04:00   52390300        0.0           0.0  152.532667   \n","2023-03-28 00:00:00-04:00   45992200        0.0           0.0  152.659333   \n","2023-03-29 00:00:00-04:00   51305700        0.0           0.0  152.911667   \n","2023-03-30 00:00:00-04:00   49501700        0.0           0.0  153.146000   \n","2023-03-31 00:00:00-04:00   68694700        0.0           0.0  153.519000   \n","\n","                              SMA_200  Signal  Position   Stop_Loss  \n","Date                                                                 \n","1980-12-12 00:00:00-05:00         NaN     0.0       NaN    0.094735  \n","1980-12-15 00:00:00-05:00         NaN     0.0       0.0    0.089793  \n","1980-12-16 00:00:00-05:00         NaN     0.0       0.0    0.083202  \n","1980-12-17 00:00:00-05:00         NaN     0.0       0.0    0.085262  \n","1980-12-18 00:00:00-05:00         NaN     0.0       0.0    0.087734  \n","...                               ...     ...       ...         ...  \n","2023-03-27 00:00:00-04:00  147.634195     1.0       0.0  150.365999  \n","2023-03-28 00:00:00-04:00  147.712498     1.0       0.0  149.767494  \n","2023-03-29 00:00:00-04:00  147.833825     1.0       0.0  152.731504  \n","2023-03-30 00:00:00-04:00  147.989232     1.0       0.0  154.242001  \n","2023-03-31 00:00:00-04:00  148.152960     1.0       0.0  156.654994  \n","\n","[10665 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-8df41238-466f-4617-a90d-ac2d10b56a75\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Dividends</th>\n","      <th>Stock Splits</th>\n","      <th>SMA_30</th>\n","      <th>SMA_200</th>\n","      <th>Signal</th>\n","      <th>Position</th>\n","      <th>Stop_Loss</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>0.099722</td>\n","      <td>0.100155</td>\n","      <td>0.099722</td>\n","      <td>0.099722</td>\n","      <td>469033600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.094735</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.094953</td>\n","      <td>0.094953</td>\n","      <td>0.094519</td>\n","      <td>0.094519</td>\n","      <td>175884800</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.089793</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.088015</td>\n","      <td>0.088015</td>\n","      <td>0.087582</td>\n","      <td>0.087582</td>\n","      <td>105728000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.083202</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.089749</td>\n","      <td>0.090183</td>\n","      <td>0.089749</td>\n","      <td>0.089749</td>\n","      <td>86441600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.085262</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.092351</td>\n","      <td>0.092785</td>\n","      <td>0.092351</td>\n","      <td>0.092351</td>\n","      <td>73449600</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.087734</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>159.940002</td>\n","      <td>160.770004</td>\n","      <td>157.869995</td>\n","      <td>158.279999</td>\n","      <td>52390300</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.532667</td>\n","      <td>147.634195</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>150.365999</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>157.970001</td>\n","      <td>158.490005</td>\n","      <td>155.979996</td>\n","      <td>157.649994</td>\n","      <td>45992200</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.659333</td>\n","      <td>147.712498</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>149.767494</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>159.369995</td>\n","      <td>161.050003</td>\n","      <td>159.350006</td>\n","      <td>160.770004</td>\n","      <td>51305700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>152.911667</td>\n","      <td>147.833825</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>152.731504</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>161.529999</td>\n","      <td>162.470001</td>\n","      <td>161.270004</td>\n","      <td>162.360001</td>\n","      <td>49501700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.146000</td>\n","      <td>147.989232</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>154.242001</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>162.440002</td>\n","      <td>165.000000</td>\n","      <td>161.910004</td>\n","      <td>164.899994</td>\n","      <td>68694700</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>153.519000</td>\n","      <td>148.152960</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>156.654994</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8df41238-466f-4617-a90d-ac2d10b56a75')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8df41238-466f-4617-a90d-ac2d10b56a75 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8df41238-466f-4617-a90d-ac2d10b56a75');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Backtest the strategy\n","initial_capital = 10000.0\n","positions = pd.DataFrame(index=data.index).fillna(0.0)\n","positions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":438},"id":"ZNopDaONyrZ8","executionInfo":{"status":"ok","timestamp":1680369152644,"user_tz":0,"elapsed":708,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"e63f249a-2602-412a-a144-a73660147179"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [1980-12-12 00:00:00-05:00, 1980-12-15 00:00:00-05:00, 1980-12-16 00:00:00-05:00, 1980-12-17 00:00:00-05:00, 1980-12-18 00:00:00-05:00, 1980-12-19 00:00:00-05:00, 1980-12-22 00:00:00-05:00, 1980-12-23 00:00:00-05:00, 1980-12-24 00:00:00-05:00, 1980-12-26 00:00:00-05:00, 1980-12-29 00:00:00-05:00, 1980-12-30 00:00:00-05:00, 1980-12-31 00:00:00-05:00, 1981-01-02 00:00:00-05:00, 1981-01-05 00:00:00-05:00, 1981-01-06 00:00:00-05:00, 1981-01-07 00:00:00-05:00, 1981-01-08 00:00:00-05:00, 1981-01-09 00:00:00-05:00, 1981-01-12 00:00:00-05:00, 1981-01-13 00:00:00-05:00, 1981-01-14 00:00:00-05:00, 1981-01-15 00:00:00-05:00, 1981-01-16 00:00:00-05:00, 1981-01-19 00:00:00-05:00, 1981-01-20 00:00:00-05:00, 1981-01-21 00:00:00-05:00, 1981-01-22 00:00:00-05:00, 1981-01-23 00:00:00-05:00, 1981-01-26 00:00:00-05:00, 1981-01-27 00:00:00-05:00, 1981-01-28 00:00:00-05:00, 1981-01-29 00:00:00-05:00, 1981-01-30 00:00:00-05:00, 1981-02-02 00:00:00-05:00, 1981-02-03 00:00:00-05:00, 1981-02-04 00:00:00-05:00, 1981-02-05 00:00:00-05:00, 1981-02-06 00:00:00-05:00, 1981-02-09 00:00:00-05:00, 1981-02-10 00:00:00-05:00, 1981-02-11 00:00:00-05:00, 1981-02-12 00:00:00-05:00, 1981-02-13 00:00:00-05:00, 1981-02-17 00:00:00-05:00, 1981-02-18 00:00:00-05:00, 1981-02-19 00:00:00-05:00, 1981-02-20 00:00:00-05:00, 1981-02-23 00:00:00-05:00, 1981-02-24 00:00:00-05:00, 1981-02-25 00:00:00-05:00, 1981-02-26 00:00:00-05:00, 1981-02-27 00:00:00-05:00, 1981-03-02 00:00:00-05:00, 1981-03-03 00:00:00-05:00, 1981-03-04 00:00:00-05:00, 1981-03-05 00:00:00-05:00, 1981-03-06 00:00:00-05:00, 1981-03-09 00:00:00-05:00, 1981-03-10 00:00:00-05:00, 1981-03-11 00:00:00-05:00, 1981-03-12 00:00:00-05:00, 1981-03-13 00:00:00-05:00, 1981-03-16 00:00:00-05:00, 1981-03-17 00:00:00-05:00, 1981-03-18 00:00:00-05:00, 1981-03-19 00:00:00-05:00, 1981-03-20 00:00:00-05:00, 1981-03-23 00:00:00-05:00, 1981-03-24 00:00:00-05:00, 1981-03-25 00:00:00-05:00, 1981-03-26 00:00:00-05:00, 1981-03-27 00:00:00-05:00, 1981-03-30 00:00:00-05:00, 1981-03-31 00:00:00-05:00, 1981-04-01 00:00:00-05:00, 1981-04-02 00:00:00-05:00, 1981-04-03 00:00:00-05:00, 1981-04-06 00:00:00-05:00, 1981-04-07 00:00:00-05:00, 1981-04-08 00:00:00-05:00, 1981-04-09 00:00:00-05:00, 1981-04-10 00:00:00-05:00, 1981-04-13 00:00:00-05:00, 1981-04-14 00:00:00-05:00, 1981-04-15 00:00:00-05:00, 1981-04-16 00:00:00-05:00, 1981-04-20 00:00:00-05:00, 1981-04-21 00:00:00-05:00, 1981-04-22 00:00:00-05:00, 1981-04-23 00:00:00-05:00, 1981-04-24 00:00:00-05:00, 1981-04-27 00:00:00-04:00, 1981-04-28 00:00:00-04:00, 1981-04-29 00:00:00-04:00, 1981-04-30 00:00:00-04:00, 1981-05-01 00:00:00-04:00, 1981-05-04 00:00:00-04:00, 1981-05-05 00:00:00-04:00, 1981-05-06 00:00:00-04:00, ...]\n","\n","[10665 rows x 0 columns]"],"text/html":["\n","  <div id=\"df-9b468aec-c2ad-4e4d-a495-1b7cf18659b1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 0 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b468aec-c2ad-4e4d-a495-1b7cf18659b1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9b468aec-c2ad-4e4d-a495-1b7cf18659b1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9b468aec-c2ad-4e4d-a495-1b7cf18659b1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["portfolio = pd.DataFrame(index=data.index).fillna(0.0)\n","portfolio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":438},"id":"tfFVWvjtzoi1","executionInfo":{"status":"ok","timestamp":1680369176796,"user_tz":0,"elapsed":359,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"2641649d-e29c-495a-f826-cff1eaab01c1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [1980-12-12 00:00:00-05:00, 1980-12-15 00:00:00-05:00, 1980-12-16 00:00:00-05:00, 1980-12-17 00:00:00-05:00, 1980-12-18 00:00:00-05:00, 1980-12-19 00:00:00-05:00, 1980-12-22 00:00:00-05:00, 1980-12-23 00:00:00-05:00, 1980-12-24 00:00:00-05:00, 1980-12-26 00:00:00-05:00, 1980-12-29 00:00:00-05:00, 1980-12-30 00:00:00-05:00, 1980-12-31 00:00:00-05:00, 1981-01-02 00:00:00-05:00, 1981-01-05 00:00:00-05:00, 1981-01-06 00:00:00-05:00, 1981-01-07 00:00:00-05:00, 1981-01-08 00:00:00-05:00, 1981-01-09 00:00:00-05:00, 1981-01-12 00:00:00-05:00, 1981-01-13 00:00:00-05:00, 1981-01-14 00:00:00-05:00, 1981-01-15 00:00:00-05:00, 1981-01-16 00:00:00-05:00, 1981-01-19 00:00:00-05:00, 1981-01-20 00:00:00-05:00, 1981-01-21 00:00:00-05:00, 1981-01-22 00:00:00-05:00, 1981-01-23 00:00:00-05:00, 1981-01-26 00:00:00-05:00, 1981-01-27 00:00:00-05:00, 1981-01-28 00:00:00-05:00, 1981-01-29 00:00:00-05:00, 1981-01-30 00:00:00-05:00, 1981-02-02 00:00:00-05:00, 1981-02-03 00:00:00-05:00, 1981-02-04 00:00:00-05:00, 1981-02-05 00:00:00-05:00, 1981-02-06 00:00:00-05:00, 1981-02-09 00:00:00-05:00, 1981-02-10 00:00:00-05:00, 1981-02-11 00:00:00-05:00, 1981-02-12 00:00:00-05:00, 1981-02-13 00:00:00-05:00, 1981-02-17 00:00:00-05:00, 1981-02-18 00:00:00-05:00, 1981-02-19 00:00:00-05:00, 1981-02-20 00:00:00-05:00, 1981-02-23 00:00:00-05:00, 1981-02-24 00:00:00-05:00, 1981-02-25 00:00:00-05:00, 1981-02-26 00:00:00-05:00, 1981-02-27 00:00:00-05:00, 1981-03-02 00:00:00-05:00, 1981-03-03 00:00:00-05:00, 1981-03-04 00:00:00-05:00, 1981-03-05 00:00:00-05:00, 1981-03-06 00:00:00-05:00, 1981-03-09 00:00:00-05:00, 1981-03-10 00:00:00-05:00, 1981-03-11 00:00:00-05:00, 1981-03-12 00:00:00-05:00, 1981-03-13 00:00:00-05:00, 1981-03-16 00:00:00-05:00, 1981-03-17 00:00:00-05:00, 1981-03-18 00:00:00-05:00, 1981-03-19 00:00:00-05:00, 1981-03-20 00:00:00-05:00, 1981-03-23 00:00:00-05:00, 1981-03-24 00:00:00-05:00, 1981-03-25 00:00:00-05:00, 1981-03-26 00:00:00-05:00, 1981-03-27 00:00:00-05:00, 1981-03-30 00:00:00-05:00, 1981-03-31 00:00:00-05:00, 1981-04-01 00:00:00-05:00, 1981-04-02 00:00:00-05:00, 1981-04-03 00:00:00-05:00, 1981-04-06 00:00:00-05:00, 1981-04-07 00:00:00-05:00, 1981-04-08 00:00:00-05:00, 1981-04-09 00:00:00-05:00, 1981-04-10 00:00:00-05:00, 1981-04-13 00:00:00-05:00, 1981-04-14 00:00:00-05:00, 1981-04-15 00:00:00-05:00, 1981-04-16 00:00:00-05:00, 1981-04-20 00:00:00-05:00, 1981-04-21 00:00:00-05:00, 1981-04-22 00:00:00-05:00, 1981-04-23 00:00:00-05:00, 1981-04-24 00:00:00-05:00, 1981-04-27 00:00:00-04:00, 1981-04-28 00:00:00-04:00, 1981-04-29 00:00:00-04:00, 1981-04-30 00:00:00-04:00, 1981-05-01 00:00:00-04:00, 1981-05-04 00:00:00-04:00, 1981-05-05 00:00:00-04:00, 1981-05-06 00:00:00-04:00, ...]\n","\n","[10665 rows x 0 columns]"],"text/html":["\n","  <div id=\"df-a84e7e4d-af32-41e4-a276-a69f16809e06\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 0 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a84e7e4d-af32-41e4-a276-a69f16809e06')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a84e7e4d-af32-41e4-a276-a69f16809e06 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a84e7e4d-af32-41e4-a276-a69f16809e06');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["positions[\"AAPL\"] = 100 * data[\"Signal\"] # Buy 100 shares when signal is 1\n","positions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"3dLuYoDRzunn","executionInfo":{"status":"ok","timestamp":1680369219425,"user_tz":0,"elapsed":865,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"5d8a6dec-a00e-4fa7-efd4-7f22d4d79c38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                            AAPL\n","Date                            \n","1980-12-12 00:00:00-05:00    0.0\n","1980-12-15 00:00:00-05:00    0.0\n","1980-12-16 00:00:00-05:00    0.0\n","1980-12-17 00:00:00-05:00    0.0\n","1980-12-18 00:00:00-05:00    0.0\n","...                          ...\n","2023-03-27 00:00:00-04:00  100.0\n","2023-03-28 00:00:00-04:00  100.0\n","2023-03-29 00:00:00-04:00  100.0\n","2023-03-30 00:00:00-04:00  100.0\n","2023-03-31 00:00:00-04:00  100.0\n","\n","[10665 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-6c21fa01-51ac-47e1-9a3e-2ac3e2e1b19a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AAPL</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>100.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c21fa01-51ac-47e1-9a3e-2ac3e2e1b19a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6c21fa01-51ac-47e1-9a3e-2ac3e2e1b19a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6c21fa01-51ac-47e1-9a3e-2ac3e2e1b19a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df1 = pd.DataFrame()\n","df1[\"position shift\"] = pd.DataFrame(positions.shift(1).copy())\n","temp = pd.DataFrame(data[\"Close\"])\n","df1[\"Close\"] = temp"],"metadata":{"id":"5o8LT4FW9mpB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#pd.DataFrame(close_cash)\n","pd.DataFrame(close_cash.cumsum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"gUYbzF6QAgwn","executionInfo":{"status":"ok","timestamp":1680372675217,"user_tz":0,"elapsed":530,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"5786ce70-017f-47a7-9b69-fad757a9508a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      0\n","Date                                   \n","1980-12-12 00:00:00-05:00           NaN\n","1980-12-15 00:00:00-05:00  0.000000e+00\n","1980-12-16 00:00:00-05:00  0.000000e+00\n","1980-12-17 00:00:00-05:00  0.000000e+00\n","1980-12-18 00:00:00-05:00  0.000000e+00\n","...                                 ...\n","2023-03-27 00:00:00-04:00  1.371386e+07\n","2023-03-28 00:00:00-04:00  1.372963e+07\n","2023-03-29 00:00:00-04:00  1.374570e+07\n","2023-03-30 00:00:00-04:00  1.376194e+07\n","2023-03-31 00:00:00-04:00  1.377843e+07\n","\n","[10665 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-282f0d8b-624c-4b97-b7e6-be83585245bc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>1.371386e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>1.372963e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>1.374570e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>1.376194e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>1.377843e+07</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-282f0d8b-624c-4b97-b7e6-be83585245bc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-282f0d8b-624c-4b97-b7e6-be83585245bc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-282f0d8b-624c-4b97-b7e6-be83585245bc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["close_cash = df1['position shift'] * df1['Close']\n","portfolio[\"Cash\"] = initial_capital - close_cash.cumsum()\n","portfolio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"2gOLo8WG4Oos","executionInfo":{"status":"ok","timestamp":1680372601641,"user_tz":0,"elapsed":564,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"efaf4b24-1116-41bc-f7b9-3b94050392b3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                   Cash    Total  Returns\n","Date                                                     \n","1980-12-12 00:00:00-05:00           NaN      NaN      NaN\n","1980-12-15 00:00:00-05:00  1.000000e+04  10000.0      NaN\n","1980-12-16 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","1980-12-17 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","1980-12-18 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","...                                 ...      ...      ...\n","2023-03-27 00:00:00-04:00 -1.370386e+07  10000.0      0.0\n","2023-03-28 00:00:00-04:00 -1.371963e+07  10000.0      0.0\n","2023-03-29 00:00:00-04:00 -1.373570e+07  10000.0      0.0\n","2023-03-30 00:00:00-04:00 -1.375194e+07  10000.0      0.0\n","2023-03-31 00:00:00-04:00 -1.376843e+07  10000.0      0.0\n","\n","[10665 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-33b76eba-7938-4c1b-92a2-c3383d4a5cf3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cash</th>\n","      <th>Total</th>\n","      <th>Returns</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>-1.370386e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>-1.371963e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>-1.373570e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>-1.375194e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>-1.376843e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33b76eba-7938-4c1b-92a2-c3383d4a5cf3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-33b76eba-7938-4c1b-92a2-c3383d4a5cf3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-33b76eba-7938-4c1b-92a2-c3383d4a5cf3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":97}]},{"cell_type":"code","source":["portfolio[\"Total\"] = portfolio[\"Cash\"] + pd.DataFrame(close_cash.cumsum())\n","portfolio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"AKVwCGlz5K3K","executionInfo":{"status":"error","timestamp":1680372652487,"user_tz":0,"elapsed":1959,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"ecb2165e-0502-47d5-8d7f-2924bcf354fc"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-99-c9e5c45ced32>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mportfolio\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Total\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mportfolio\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Cash\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclose_cash\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcumsum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mportfolio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3643\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setitem_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3644\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3645\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_item_frame_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3646\u001b[0m         elif (\n\u001b[1;32m   3647\u001b[0m             \u001b[0mis_list_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_set_item_frame_value\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3773\u001b[0m             \u001b[0mlen_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3774\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen_cols\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3775\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Columns must be same length as key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3776\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3777\u001b[0m             \u001b[0;31m# align right-hand-side columns if self.columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Columns must be same length as key"]}]},{"cell_type":"code","source":["portfolio[\"Returns\"] = portfolio[\"Total\"].pct_change()\n","portfolio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"yuaWGl1BANee","executionInfo":{"status":"ok","timestamp":1680372473819,"user_tz":0,"elapsed":377,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"0f4078d9-d62b-4893-8ef3-9b94bd69ae90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                   Cash    Total  Returns\n","Date                                                     \n","1980-12-12 00:00:00-05:00           NaN      NaN      NaN\n","1980-12-15 00:00:00-05:00  1.000000e+04  10000.0      NaN\n","1980-12-16 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","1980-12-17 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","1980-12-18 00:00:00-05:00  1.000000e+04  10000.0      0.0\n","...                                 ...      ...      ...\n","2023-03-27 00:00:00-04:00 -1.370386e+07  10000.0      0.0\n","2023-03-28 00:00:00-04:00 -1.371963e+07  10000.0      0.0\n","2023-03-29 00:00:00-04:00 -1.373570e+07  10000.0      0.0\n","2023-03-30 00:00:00-04:00 -1.375194e+07  10000.0      0.0\n","2023-03-31 00:00:00-04:00 -1.376843e+07  10000.0      0.0\n","\n","[10665 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-4cee823b-d0a9-4f09-97d5-86c012788a84\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cash</th>\n","      <th>Total</th>\n","      <th>Returns</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1980-12-12 00:00:00-05:00</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-15 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-16 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-17 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1980-12-18 00:00:00-05:00</th>\n","      <td>1.000000e+04</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-27 00:00:00-04:00</th>\n","      <td>-1.370386e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-28 00:00:00-04:00</th>\n","      <td>-1.371963e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-29 00:00:00-04:00</th>\n","      <td>-1.373570e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-30 00:00:00-04:00</th>\n","      <td>-1.375194e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2023-03-31 00:00:00-04:00</th>\n","      <td>-1.376843e+07</td>\n","      <td>10000.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10665 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cee823b-d0a9-4f09-97d5-86c012788a84')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4cee823b-d0a9-4f09-97d5-86c012788a84 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4cee823b-d0a9-4f09-97d5-86c012788a84');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["# Plot the results\n","import matplotlib.pyplot as plt\n","plt.plot(portfolio[\"Total\"])\n","plt.xlabel(\"Date\")\n","plt.ylabel(\"Portfolio Value ($)\")\n","plt.title(\"SMA Crossover Trading Strategy\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"JcFm3AgAyyn4","executionInfo":{"status":"error","timestamp":1680370446429,"user_tz":0,"elapsed":389,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"2bd81fe1-82fb-4ba2-ee0f-59ba1d8961d8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3628\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3629\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3630\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Total'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-f9385b507aa2>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Plot the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mportfolio\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Total\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Date\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Portfolio Value ($)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3504\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3505\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3506\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3507\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3629\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3630\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3631\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3632\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3633\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Total'"]}]},{"cell_type":"code","source":["#!pip install yfinance"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x2KM5HzN1ChW","executionInfo":{"status":"ok","timestamp":1679245521212,"user_tz":0,"elapsed":6316,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"5f15a385-4416-436a-b453-ba36370ee035"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting yfinance\n","  Downloading yfinance-0.2.12-py2.py3-none-any.whl (59 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m59.2/59.2 KB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting cryptography>=3.3.2\n","  Downloading cryptography-39.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (4.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/4.2 MB\u001b[0m \u001b[31m44.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.9/dist-packages (from yfinance) (1.22.4)\n","Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.9/dist-packages (from yfinance) (4.11.2)\n","Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.9/dist-packages (from yfinance) (4.9.2)\n","Collecting frozendict>=2.3.4\n","  Downloading frozendict-2.3.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (112 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.8/112.8 KB\u001b[0m \u001b[31m15.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.9/dist-packages (from yfinance) (1.1)\n","Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.9/dist-packages (from yfinance) (0.0.11)\n","Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.9/dist-packages (from yfinance) (2022.7.1)\n","Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.9/dist-packages (from yfinance) (2.27.1)\n","Collecting appdirs>=1.4.4\n","  Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.9/dist-packages (from yfinance) (1.4.4)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.9/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4)\n","Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.9/dist-packages (from cryptography>=3.3.2->yfinance) (1.15.1)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.9/dist-packages (from html5lib>=1.1->yfinance) (1.15.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.9/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests>=2.26->yfinance) (1.26.15)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests>=2.26->yfinance) (2.0.12)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests>=2.26->yfinance) (2022.12.7)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests>=2.26->yfinance) (3.4)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.9/dist-packages (from cffi>=1.12->cryptography>=3.3.2->yfinance) (2.21)\n","Installing collected packages: appdirs, frozendict, cryptography, yfinance\n","Successfully installed appdirs-1.4.4 cryptography-39.0.2 frozendict-2.3.5 yfinance-0.2.12\n"]}]},{"cell_type":"markdown","source":["# FOREX TRADING ARCHITECTURE\n","1) Develop a strategy to get signals\n","\n","2) Backtesting of strategy\n","\n","3) System to place/execute trades\n","\n","4) Incorporate risk management techniques\n","\n","5) Portfolio management"],"metadata":{"id":"iGWuuO9qjAnm"}},{"cell_type":"markdown","source":["##  A simple forex trading strategy(moving averages and RSI)\n","\n","creating a simple moving average strategy using FXCM\n","\n","The strategy entails the following:\n","1. A 50 moving average and a 200 moving average would be chosen. Values would be optimized later on\n","\n","2. A rsi indicator would also be deployed.\n","\n","3. Long Entry signal would be generated when 50 mva crossess 200 from down to up and also RSI is under 30\n","\n","4. Short entry signal would be generated when 50 mvs crossess 200 from up to down and also RSI is over 40\n","\n","5. Exit trades would happen when:\n","    stoploss = price goes against us by a*ATR\n","    take_profit = price goes in our favour by b*ATR\n","\n","6. For Risk Management (That is, position sizing and accounting for leverage and all using 1000 dollars as my start capital)\n","\n","    1. We would be risking 10 dollars per trade (about 1 percent)\n","    2. Calculate position sizing\n","    3. Adjust for account leverage\n","    4. Refine based on trading conditions\n","7. Backtesting and evaluation"],"metadata":{"id":"hdq_CUQ1xnge"}},{"cell_type":"code","source":["!pip install fxcmpy\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"7y4_o6Fb1RK0","executionInfo":{"status":"ok","timestamp":1683808941439,"user_tz":0,"elapsed":5566,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}},"outputId":"2a6329a3-c186-4861-945d-16118f756159"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting fxcmpy\n","  Downloading fxcmpy-1.3.3-py3-none-any.whl (28 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from fxcmpy) (1.5.3)\n","Collecting python-socketio==5.0.4 (from fxcmpy)\n","  Downloading python_socketio-5.0.4-py2.py3-none-any.whl (52 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.7/52.7 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting configparser (from fxcmpy)\n","  Downloading configparser-5.3.0-py3-none-any.whl (19 kB)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from fxcmpy) (2.27.1)\n","Collecting python-engineio==4.3.1 (from fxcmpy)\n","  Downloading python_engineio-4.3.1-py3-none-any.whl (52 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.7/52.7 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from fxcmpy) (1.5.1)\n","Collecting bidict>=0.21.0 (from python-socketio==5.0.4->fxcmpy)\n","  Downloading bidict-0.22.1-py3-none-any.whl (35 kB)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->fxcmpy) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->fxcmpy) (2022.7.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->fxcmpy) (1.22.4)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->fxcmpy) (1.26.15)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->fxcmpy) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->fxcmpy) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->fxcmpy) (3.4)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->fxcmpy) (1.7.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->fxcmpy) (1.16.0)\n","Installing collected packages: python-engineio, configparser, bidict, python-socketio, fxcmpy\n","Successfully installed bidict-0.22.1 configparser-5.3.0 fxcmpy-1.3.3 python-engineio-4.3.1 python-socketio-5.0.4\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["configparser"]}}},"metadata":{}}]},{"cell_type":"code","source":["import yfinance as yf\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"metadata":{"id":"nJdSkEV9jLS5","executionInfo":{"status":"ok","timestamp":1683808624110,"user_tz":0,"elapsed":37,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# link to your demo account \"https://app.fxcm.com/desktop/trading\""],"metadata":{"id":"Zua7ea5Z0EkN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import fxcmpy"],"metadata":{"id":"nfvPP4aX3gwj","executionInfo":{"status":"ok","timestamp":1683809523161,"user_tz":0,"elapsed":985,"user":{"displayName":"Gabriel Anyaele","userId":"17365024633184072987"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"M1yz8a1A3knt"},"execution_count":null,"outputs":[]}]}